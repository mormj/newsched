// example IDL file

namespace pmtf;

enum DataType : byte {     
    UNKNOWN = 0,
    FLOAT,
    DOUBLE,
    CFLOAT,
    CDOUBLE,
    INT8,
    INT16,
    INT32,
    INT64,
    UINT8,
    UINT16,
    UINT32,
    UINT64,
    BOOL,
    ENUM,
    STRING,
    PMT,
    ANY,
    VOID }

struct Complex {
    re:float32;
    im:float32;
}

struct Complexd {
    re:float64;
    im:float64;
}

// enum ContainerType : int8 { NONE = 0, VECTOR, MAP, DICT, PAIR, TUPLE }



table ScalarFloat32 {
    value:float32;
}
table ScalarFloat64 {
    value:float64;
}
table ScalarComplex {
    value:Complex;
}
table ScalarComplexd {
    value:Complexd;
}
table ScalarInt8 {
    value:int8;
}
table ScalarInt16 {
    value:int16;
}
table ScalarInt32 {
    value:int32;
}
table ScalarInt64 {
    value:int64;
}
table ScalarUInt8 {
    value:uint8;
}
table ScalarUInt16 {
    value:uint16;
}
table ScalarUInt32 {
    value:uint32;
}
table ScalarUInt64 {
    value:uint64;
}
table ScalarBool {
    value:bool;
}

table VectorFloat32 {
    value:[float32];
}
table VectorFloat64 {
    value:[float64];
}
table VectorComplex {
    value:[Complex];
}
table VectorComplexd {
    value:[Complexd];
}
table VectorInt8 {
    value:[int8];
}
table VectorInt16 {
    value:[int16];
}
table VectorInt32 {
    value:[int32];
}
table VectorInt64 {
    value:[int64];
}
table VectorUInt8 {
    value:[uint8];
}
table VectorUInt16 {
    value:[uint16];
}
table VectorUInt32 {
    value:[uint32];
}
table VectorUInt64 {
    value:[uint64];
}
table VectorBool {
    value:[bool];
}


union Data { ScalarFloat32, ScalarFloat64, ScalarComplex, ScalarComplexd, 
ScalarInt8, ScalarInt16, ScalarInt32, ScalarInt64, 
ScalarUInt8, ScalarUInt16, ScalarUInt32, ScalarUInt64,
ScalarBool,
VectorFloat32, VectorFloat64, VectorComplex, VectorComplexd, 
VectorInt8, VectorInt16, VectorInt32, VectorInt64, 
VectorUInt8, VectorUInt16, VectorUInt32, VectorUInt64,
VectorBool
}

// table Scalar { 
//     type:ScalarTypes;
// }

// union Container { Scalar, Vector }

// table Scalar {
//     // float_val:float32;
//     // double_val:float64;
//     // complex_val:Complex;
//     // complexd_val:Complexd;
//     // int8_val:int8;
//     // int16_val:int16;
//     int32_val:int32;
//     // int64_val:int64;
//     // uint8_val: uint8;
//     // uint16_val:uint16;
//     // uint32_val:uint32;
//     // uint64_val:uint64;
//     // bool_val:bool;
// }

// table Vector {
//     // float_val:[float32];
//     // double_val:[float64];
//     // complex_val:[Complex];
//     // complexd_val:[Complexd];
//     // int8_val:[int8];
//     // int16_val:[int16];
//     int32_val:[int32];
//     // int64_val:[int64];
//     // uint8_val: [uint8];
//     // uint16_val:[uint16];
//     // uint32_val:[uint32];
//     // uint64_val:[uint64];
//     // bool_val:[bool];
// }

table Pmt {
    // data_type:DataType;
    data:Data;
}

root_type Pmt;